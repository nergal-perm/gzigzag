/* DO NOT EDIT THIS FILE. THIS FILE WAS GENERATED FROM flob/SimpleTextView.zob,
 * EDIT THAT FILE INSTEAD!
 * All changes to this file will be lost.
 */
/*   
SimpleTextView.zob
 *    
 *    Copyright (c) 1999-2000, Ted Nelson and Tuomas Lukka
 *
 *    You may use and distribute under the terms of either the GNU Lesser
 *    General Public License, either version 2 of the license or,
 *    at your choice, any later version. Alternatively, you may use and
 *    distribute under the terms of the XPL.
 *
 *    See the LICENSE.lgpl and LICENSE.xpl files for the specific terms of 
 *    the licenses.
 *
 *    This software is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the README
 *    file for more details.
 *
 */
/*
 * Written by Benjamin Fallenstein
 */

package org.gzigzag.flob;

import java.awt.*;
import org.gzigzag.*;
import org.gzigzag.media.FText;

/**
 * A view with the text of a single cell, layoutet as an FText.
 */

public class SimpleTextView implements FlobView, ZOb {
    public static final String rcsid = "$Id: SimpleTextView.zob,v 1.8 2001/04/02 20:02:51 bfallenstein Exp $";
    public static boolean dbg = false;

    static final void p(String s) {
        if (dbg) System.out.println(s);
    }

    static final void pa(String s) {
        System.out.println(s);
    }


    /**
     * The font to use.
     * <p>Default value: <PRE> new Font("SansSerif", Font.PLAIN, 16);</PRE>.
     *
     * @structparam 1
     */

    public
    Font font
            = new Font("SansSerif", Font.PLAIN, 16);
    /**
     * UNDOCUMENTED.
     *
     * <p>Default value: <PRE> Color.black;</PRE>.
     *
     * @structparam 1
     */

    public Color fgcolor
            = Color.black;
    /**
     * UNDOCUMENTED.
     *
     * <p>Default value: <PRE> Color.white;</PRE>.
     *
     * @structparam 1
     */

    public Color bgcolor
            = Color.white;
    /**
     * UNDOCUMENTED.
     *
     * <p>Default value: <PRE> new FTextLayouter();</PRE>.
     *
     * @structparam 1
     */

    public ZOb ftextlayouter
            = new FTextLayouter();


    /* AUTOGENERATED! */
    static final private int fullmask = 15;

    @Override
    public String readParams(ZZCell start) {
        int m = 0;
        try {
            if (start!=null)
                m = readParams(start, 0);
        } catch (Throwable t) {
            ZZLogger.exc(t);
        } finally {
            init__zob();
        }
        if ((m & fullmask)!=fullmask) {
            // not all parameters present - no problem right now.
        }
        return "";
    }

    /* AUTOGENERATED! */
    private int readParams(ZZCell start, int mask) {
        ZZCell n = start;
        while (n!=null) {
            String s = n.getText();
            // Tests autogenerated from members.

            if (s.equals("font")) {
                mask |= 1;
                try {
                    ZZCell c = n.s("d.1");
                    s = c.getText();
                    {
                        ZZCell c1 = c.s("d.1");
                        int size = 12;
                        int style = Font.PLAIN;
                        if (c1!=null) {
                            size = Integer.parseInt(c1.getText());
                            ZZCell c2 = c1.s("d.1");
                            if (c2!=null) {
                                String sty = c2.getText();
                                if (sty.equals("BOLD"))
                                    style = Font.BOLD;
                                if (sty.equals("ITALIC"))
                                    style = Font.ITALIC;
                                else {
                                    // error...
                                }
                            }
                        }
                        font = new Font(s, style, size);
                    }

                } catch (Exception e) {
                    ZZLogger.exc(e);
                }
            } else if (s.equals("fgcolor")) {
                mask |= 2;
                try {
                    ZZCell c = n.s("d.1");
                    s = c.getText();
                    fgcolor = Color.decode(s);
                } catch (Exception e) {
                    ZZLogger.exc(e);
                }
            } else if (s.equals("bgcolor")) {
                mask |= 4;
                try {
                    ZZCell c = n.s("d.1");
                    s = c.getText();
                    bgcolor = Color.decode(s);
                } catch (Exception e) {
                    ZZLogger.exc(e);
                }
            } else if (s.equals("ftextlayouter")) {
                mask |= 8;
                try {
                    ZZCell c = n.s("d.1");
                    s = c.getText();
                    {
                        ftextlayouter = ZZDefaultSpace.readZOb(c);
                        // ftextlayouter = ZZDefaultSpace.newZOb(s);
                        // ftextlayouter.readParams(c.s("d.2"));

                    }

                } catch (Exception e) {
                    ZZLogger.exc(e);
                }
            } else {
            } // grab that last "else"
            ZZCell h = n.h("d.3");
            if (h!=null && h!=n) {
                // recurse
                mask |= readParams(h, mask);
            }
            n = n.s("d.2");
        }
        return mask;
    }


    FontMetrics fm;

    protected void init__zob() {
        fm = (ScalableFont.fmComp.getFontMetrics(font));
    }

    public void raster(FlobSet into, FlobFactory fact,
                       ZZCell view, String[] dims, ZZCell accursed) {
        FText ftxt;

        if (bgcolor!=null) {
            ftxt = new FText(new FText.Part[]{
                    new FText.CellPart(accursed, 0, -1, font, fm, bgcolor, fgcolor)
            });
        } else {
            ftxt = new FText(new FText.Part[]{
                    new FText.CursorCellPart(accursed, 0, -1, font, fm, null, fgcolor)
            });
        }

        Dimension size = into.getSize();
        Rectangle rect = new Rectangle(0, 0, size.width, size.height);

        ((FTextLayouter) ftextlayouter).place(into, ftxt, rect,
                0, rect.y + rect.height / 2,
                ZZCursorReal.getVisualTextOffset(view),
                true, null);

    }
}

// vim: set syntax=java :
