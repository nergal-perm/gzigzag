/* DO NOT EDIT THIS FILE. THIS FILE WAS GENERATED FROM ../Modules/prez/PrezRaster.zob,
 * EDIT THAT FILE INSTEAD!
 * All changes to this file will be lost.
 */
/*   
Prez.java
 *    
 *    Copyright (c) 2000, Ted Nelson and Tuomas Lukka
 *
 *    You may use and distribute under the terms of either the GNU Lesser
 *    General Public License, either version 2 of the license or,
 *    at your choice, any later version. Alternatively, you may use and
 *    distribute under the terms of the XPL.
 *
 *    See the LICENSE.lgpl and LICENSE.xpl files for the specific terms of 
 *    the licenses.
 *
 *    This software is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the README
 *    file for more details.
 *
 */
/*
 * Written by Tuomas Lukka
 */
package org.gzigzag.module;
import org.gzigzag.*;
import java.awt.*;
import java.util.*;
import java.io.*;
 
/** A simple presentation raster.
 * The structure is described along three dimensions: 
 * hierarchy, sibling and cross-reference (d.1, d.2 and d.3 by default).
 * On these, the hierarchy is arranged as a corner list with an empty
 * corner cell, and the cross-references are simply siblings 
 * connected.
 */

public class PrezRaster implements FlobView, ZOb {
    public static boolean dbg = false;
    static final void p(String s) { if(dbg) System.out.println(s); }
    static final void pa(String s) { System.out.println(s); }

    
    
	/** The vstream raster used for the header.  
 * <p>Default value: <PRE> new RankTextView() {{</PRE>. 
 
 * @structparam 1 
 */ 


	ZOb hdrvs // VStreamRaster
	    = new RankTextView() {{
		width = 650;
		dim = "d.foo";
	    }};
	/** The vstream raster used for the items. 
 * @structparam 1 
 */ 


	ZOb txtvs // RankTextView
	    = new RankTextView() {{
		width = 500;
		dim = "d.foo";
	    }};
	/** The vstream raster used for the crossrefs. 
 * @structparam 1 
 */ 

 public 
	ZOb xrefvs // RankTextView
	    = new RankTextView() {{
		width = 500;
		dim = "d.foo";
	    }};	/** The amount to shift the header. 
 * <p>Default value: <PRE> 30;</PRE>. 
 
 * @structparam 1 
 */ 

 public 
	int hdrindent
	    = 30;	/** The amount to shift the items. 
 * <p>Default value: <PRE> 50;</PRE>. 
 
 * @structparam 1 
 */ 

 public 
	int indent
	    = 50;	/** The amount to space the items. 
 * <p>Default value: <PRE> 30;</PRE>. 
 
 * @structparam 1 
 */ 

 public 
	int space
	    = 30;/** UNDOCUMENTED. 
 
 * <p>Default value: <PRE> 120;</PRE>. 
 
 * @structparam 1 
 */ 

 public 	int topmargin 
	    = 120;/** UNDOCUMENTED. 
 
 * <p>Default value: <PRE> 0;</PRE>. 
 
 * @structparam 1 
 */ 

 public 	int afterhdr
	    = 0;/** UNDOCUMENTED. 
 
 * <p>Default value: <PRE> new ScalableFont("SansSerif", Font.PLAIN, 32);</PRE>. 
 
 * @structparam 1 
 */ 

 public 	ScalableFont hdrfont 
	    = new ScalableFont("SansSerif", Font.PLAIN, 32);/** UNDOCUMENTED. 
 
 * <p>Default value: <PRE> new ScalableFont("SansSerif", Font.PLAIN, 24);</PRE>. 
 
 * @structparam 1 
 */ 

 public 	ScalableFont txtfont 
	    = new ScalableFont("SansSerif", Font.PLAIN, 24);/** UNDOCUMENTED. 
 
 * <p>Default value: <PRE> new ScalableFont("SansSerif", Font.PLAIN, 10);</PRE>. 
 
 * @structparam 1 
 */ 

 public 	ScalableFont xreffont 
	    = new ScalableFont("SansSerif", Font.PLAIN, 10);/** UNDOCUMENTED. 
 
 * <p>Default value: <PRE> 650;</PRE>. 
 
 * @structparam 1 
 */ 

 public 	int hdrwidth
	    = 650;
	int txtwidth
	    = 500;
    

    /* AUTOGENERATED! */
    static final private int fullmask = 1023;

    /* AUTOGENERATED! */
    public String readParams(ZZCell start) {
	int m = 0;
	try {
	    if(start != null)
		m = readParams(start, 0);
	} catch(Throwable t) {
	    ZZLogger.exc(t);
	} finally {
	    
	}
	if((m & fullmask) != fullmask) {
	    // not all parameters present - no problem right now.
	}
	return "";
    }

    /* AUTOGENERATED! */
    private int readParams(ZZCell start, int mask) {
	ZZCell n = start;
	while(n != null) {
	    String s = n.getText();
	    // Tests autogenerated from members.
	    
	    if(s.equals("xrefvs")) {
		mask |= 1;
		try {
		    ZZCell c = n.s("d.1"); s = c.getText(); 
    {
    xrefvs = ZZDefaultSpace.readZOb(c);
    // xrefvs = ZZDefaultSpace.newZOb(s);
    // xrefvs.readParams(c.s("d.2"));

    }
 
		} catch(Exception e) {
		    ZZLogger.exc(e);
		}
	    } else


	    if(s.equals("hdrindent")) {
		mask |= 2;
		try {
		    ZZCell c = n.s("d.1"); s = c.getText(); hdrindent = Integer.parseInt(s);  
		} catch(Exception e) {
		    ZZLogger.exc(e);
		}
	    } else


	    if(s.equals("indent")) {
		mask |= 4;
		try {
		    ZZCell c = n.s("d.1"); s = c.getText(); indent = Integer.parseInt(s);  
		} catch(Exception e) {
		    ZZLogger.exc(e);
		}
	    } else


	    if(s.equals("space")) {
		mask |= 8;
		try {
		    ZZCell c = n.s("d.1"); s = c.getText(); space = Integer.parseInt(s);  
		} catch(Exception e) {
		    ZZLogger.exc(e);
		}
	    } else


	    if(s.equals("topmargin")) {
		mask |= 16;
		try {
		    ZZCell c = n.s("d.1"); s = c.getText(); topmargin = Integer.parseInt(s);  
		} catch(Exception e) {
		    ZZLogger.exc(e);
		}
	    } else


	    if(s.equals("afterhdr")) {
		mask |= 32;
		try {
		    ZZCell c = n.s("d.1"); s = c.getText(); afterhdr = Integer.parseInt(s);  
		} catch(Exception e) {
		    ZZLogger.exc(e);
		}
	    } else


	    if(s.equals("hdrfont")) {
		mask |= 64;
		try {
		    ZZCell c = n.s("d.1"); s = c.getText(); 
		    {
			ZZCell c1 = c.s("d.1");
			int size = 12;
			int style = Font.PLAIN;
			if(c1 != null) {
			    size = Integer.parseInt(c1.getText());
			    ZZCell c2 = c1.s("d.1");
			    if(c2 != null) {
				String sty = c2.getText();
				if(sty.equals("BOLD"))
				    style = Font.BOLD;
				if(sty.equals("ITALIC"))
				    style = Font.ITALIC;
				else {
				    // error...
				}
			    }
			}
			hdrfont = new ScalableFont(s, style, size);
		    }
 
		} catch(Exception e) {
		    ZZLogger.exc(e);
		}
	    } else


	    if(s.equals("txtfont")) {
		mask |= 128;
		try {
		    ZZCell c = n.s("d.1"); s = c.getText(); 
		    {
			ZZCell c1 = c.s("d.1");
			int size = 12;
			int style = Font.PLAIN;
			if(c1 != null) {
			    size = Integer.parseInt(c1.getText());
			    ZZCell c2 = c1.s("d.1");
			    if(c2 != null) {
				String sty = c2.getText();
				if(sty.equals("BOLD"))
				    style = Font.BOLD;
				if(sty.equals("ITALIC"))
				    style = Font.ITALIC;
				else {
				    // error...
				}
			    }
			}
			txtfont = new ScalableFont(s, style, size);
		    }
 
		} catch(Exception e) {
		    ZZLogger.exc(e);
		}
	    } else


	    if(s.equals("xreffont")) {
		mask |= 256;
		try {
		    ZZCell c = n.s("d.1"); s = c.getText(); 
		    {
			ZZCell c1 = c.s("d.1");
			int size = 12;
			int style = Font.PLAIN;
			if(c1 != null) {
			    size = Integer.parseInt(c1.getText());
			    ZZCell c2 = c1.s("d.1");
			    if(c2 != null) {
				String sty = c2.getText();
				if(sty.equals("BOLD"))
				    style = Font.BOLD;
				if(sty.equals("ITALIC"))
				    style = Font.ITALIC;
				else {
				    // error...
				}
			    }
			}
			xreffont = new ScalableFont(s, style, size);
		    }
 
		} catch(Exception e) {
		    ZZLogger.exc(e);
		}
	    } else


	    if(s.equals("hdrwidth")) {
		mask |= 512;
		try {
		    ZZCell c = n.s("d.1"); s = c.getText(); hdrwidth = Integer.parseInt(s);  
		} catch(Exception e) {
		    ZZLogger.exc(e);
		}
	    } else


	    { } // grab that last "else"
	    ZZCell h = n.h("d.3");
	    if(h != null && h != n) {
		// recurse
		mask |= readParams(h, mask);
	    }
	    n = n.s("d.2");
	}
	return mask;
    }


	
    static final String next = "d.2";
    static final String hier = "d.1";
    static final String cross = "d.3";

    public void raster(FlobSet into, FlobFactory fact,
	ZZCell view, String[] dims, ZZCell accursed) {

	ZZCell hdr = null;

	if(accursed.s(next, -1) == null) {
	    if((hdr = accursed.s(hier, -1)) == null)
		hdr = accursed;
	} else
	    hdr = accursed.h(next, -1).s(hier, -1);

	if(hdr == null) {
	    pa("Null hdr for prez - bailing out");
	    return;
	}

	RankTextView hdrvs = (RankTextView)this.hdrvs;
	RankTextView txtvs = (RankTextView)this.txtvs;
	RankTextView xrefvs = (RankTextView)this.xrefvs;

	hdrvs.font = hdrfont;
	txtvs.font = txtfont;
	xrefvs.font = xreffont;

	hdrvs.width = hdrwidth;
	txtvs.width = txtwidth;

	hdrvs.readParams(null);
	txtvs.readParams(null);
	xrefvs.readParams(null);

	int y = topmargin;
	Rectangle bds = hdrvs.raster(into, hdr, 0, false, 
	    hdrindent, y);
	p("Raster 1: "+bds);
	
	y += bds.height + afterhdr;

	ZZCell cur = hdr.s(hier, 1);
	if(cur == null) return;

	LoopDetector l = new LoopDetector();
	while(true) { 
	    cur = cur.s(next, 1);
	    if(cur == null) break;
	    l.detect(cur);
	    bds = txtvs.raster(into, cur, 0, false, indent, y);
	    p("Raster n: "+bds);
	    // indicate that there is more
	    if(cur.s(hier, 1) != null) {
		into.add(new LineDecor(bds.x+bds.width, bds.y, 
				bds.x+bds.width, bds.y+bds.height,
				Color.blue, 1));
	    }
	    if(cur.s(cross, -1) != null)
		xrefvs.raster(into, cur.s(cross,-1),
				0, false, 400, bds.y-15);
	    if(cur.s(cross, 1) != null)
		xrefvs.raster(into, cur.s(cross,1),
				0, false, 400, bds.y+bds.height+5);
		
	    y += bds.height + space;
	}
    }
}
// vim: set syntax=java :
