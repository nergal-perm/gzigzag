/* DO NOT EDIT THIS FILE. THIS FILE WAS GENERATED FROM ../Modules/nile/SplitNileView.zob,
 * EDIT THAT FILE INSTEAD!
 * All changes to this file will be lost.
 */
/*   
SplitNileView.zob
 *    
 *    You may use and distribute under the terms of either the GNU Lesser
 *    General Public License, either version 2 of the license or,
 *    at your choice, any later version. Alternatively, you may use and
 *    distribute under the terms of the XPL.
 *
 *    See the LICENSE.lgpl and LICENSE.xpl files for the specific terms of 
 *    the licenses.
 *
 *    This software is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the README
 *    file for more details.
 *
 */
/*
 * Written by Benjamin Fallenstein
 */
 
package org.gzigzag.module;
import org.gzigzag.*;
import java.awt.*;

/** A view that shows two Nile streams side-by-side. */

public class SplitNileView implements FlobView, ZOb {
public static final String rcsid = "$Id: SplitNileView.zob,v 1.1 2000/12/26 20:15:50 bfallenstein Exp $";
    /** Should we print out debugging info? */
    public static boolean dbg = false;
    static final void p(String s) { if(dbg) pa(s); }
    static final void pa(String s) { System.out.println(s); }

    
    
	/** The space to leave between the two Nile streams. 
 * <p>Default value: <PRE> 20;</PRE>. 
 
 * @structparam 1 
 */ 

 public 
	int margin
	    = 20;
    

    /* AUTOGENERATED! */
    static final private int fullmask = 1;

    /* AUTOGENERATED! */
    public String readParams(ZZCell start) {
	int m = 0;
	try {
	    if(start != null)
		m = readParams(start, 0);
	} catch(Throwable t) {
	    ZZLogger.exc(t);
	} finally {
	    
	}
	if((m & fullmask) != fullmask) {
	    // not all parameters present - no problem right now.
	}
	return "";
    }

    /* AUTOGENERATED! */
    private int readParams(ZZCell start, int mask) {
	ZZCell n = start;
	while(n != null) {
	    String s = n.getText();
	    // Tests autogenerated from members.
	    
	    if(s.equals("margin")) {
		mask |= 1;
		try {
		    ZZCell c = n.s("d.1"); s = c.getText(); margin = Integer.parseInt(s);  
		} catch(Exception e) {
		    ZZLogger.exc(e);
		}
	    } else


	    { } // grab that last "else"
	    ZZCell h = n.h("d.3");
	    if(h != null && h != n) {
		// recurse
		mask |= readParams(h, mask);
	    }
	    n = n.s("d.2");
	}
	return mask;
    }



    public void raster(FlobSet into, FlobFactory fact,
                       ZZCell win, String[] dims, ZZCell accursed) {
	ZZCell leftc = accursed.s("d.nile-pair", -1);
	ZZCell rightc = accursed.s("d.nile-pair");
	if(leftc != null && rightc == null)
	    rightc = accursed;
	else if(leftc == null && rightc != null)
	    leftc = accursed;
	else
	    throw new ZZError("HELP! Strange d.nile-pair arrangement XXX");
	
	ZZCell leftacc = ZZCursorReal.get(leftc);
	ZZCell rightacc = ZZCursorReal.get(rightc);
		
	Dimension size = new Dimension(into.getSize());
	size.width = (size.width - margin) / 2;
	FlobSet left = into.create(size), right = into.create(size);
	
	Nile1View view = new Nile1View(); 
	view.init__zob();
	SimpleBeamer bmr = new SimpleBeamer();
	
	view.raster(left, fact, leftc, dims, leftacc);
	view.raster(right, fact, rightc, dims, rightacc);
	
	into.fetch(left, 0, 0, 0);
	into.fetch(right, size.width + margin, 0, 0);
	
	bmr.decorate(into, "", null);
    }
}
