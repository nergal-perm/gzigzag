/* DO NOT EDIT THIS FILE. THIS FILE WAS GENERATED FROM flob/CombinedView.zob,
 * EDIT THAT FILE INSTEAD!
 * All changes to this file will be lost.
 */
/*   
CombinedView.zob
 *    
 *    You may use and distribute under the terms of either the GNU Lesser
 *    General Public License, either version 2 of the license or,
 *    at your choice, any later version. Alternatively, you may use and
 *    distribute under the terms of the XPL.
 *
 *    See the LICENSE.lgpl and LICENSE.xpl files for the specific terms of 
 *    the licenses.
 *
 *    This software is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the README
 *    file for more details.
 *
 */
/*
 * Written by Benjamin Fallenstein
 */

package org.gzigzag.flob;

import java.awt.Dimension;
import java.awt.Point;
import org.gzigzag.ApplitudeMgr;
import org.gzigzag.ZOb;
import org.gzigzag.ZZCell;
import org.gzigzag.ZZLogger;

/**
 * A view that shows all views of the accursed cell next to each other.
 */

public class CombinedView implements FlobView, ZOb {
    public static final String rcsid = "$Id: CombinedView.zob,v 1.6 2000/12/31 15:15:50 bfallenstein Exp $";
    /**
     * Should we print out debugging info?
     */
    public static boolean dbg = false;

    static final void p(String s) {
        if (dbg) pa(s);
    }

    static final void pa(String s) {
        System.out.println(s);
    }


    /* AUTOGENERATED! */
    static final private int fullmask = 0;

    /* AUTOGENERATED! */
    public String readParams(ZZCell start) {
        int m = 0;
        try {
            if (start!=null)
                m = readParams(start, 0);
        } catch (Throwable t) {
            ZZLogger.exc(t);
        } finally {

        }
        if ((m & fullmask)!=fullmask) {
            // not all parameters present - no problem right now.
        }
        return "";
    }

    /* AUTOGENERATED! */
    private int readParams(ZZCell start, int mask) {
        ZZCell n = start;
        while (n!=null) {
            String s = n.getText();
            // Tests autogenerated from members.

            {
            } // grab that last "else"
            ZZCell h = n.h("d.3");
            if (h!=null && h!=n) {
                // recurse
                mask |= readParams(h, mask);
            }
            n = n.s("d.2");
        }
        return mask;
    }


    public void raster(FlobSet into, FlobFactory fact,
                       ZZCell win, String[] dims, ZZCell accursed) {
        ZZCell[] apps = ApplitudeMgr.getApplitudes(accursed);
        if (apps.length==0)
            apps = new ZZCell[]{ApplitudeMgr.getFallback(win.getSpace())};
        int n = apps.length;

        ZZCell pref = ApplitudeMgr.getWindowApp(win);
        Dimension size = new Dimension(into.getSize());
        if (pref!=null)
            fact.centerFlob(into, pref, pref, (float) 1.5,
                    new Point(size.width, size.height), 1, 1, 1);
        size.width = size.width / n;

        for (int i = 0; i < n; i++) {
            FlobSet set = into.create(size);
            FlobView view = ApplitudeMgr.getView(apps[i]);
            view.raster(set, fact, win, dims, accursed);
            into.fetch(set, size.width * i, 0, 0, apps[i]);
        }
    }
}
