/* DO NOT EDIT THIS FILE. THIS FILE WAS GENERATED FROM ZZPrimitiveCommand.zob,
 * EDIT THAT FILE INSTEAD!
 * All changes to this file will be lost.
 */
/*   
ZZPrimitiveCommand.java
 *    
 *    Copyright (c) 1999, Ted Nelson and Tuomas Lukka
 *
 *    You may use and distribute under the terms of either the GNU Lesser
 *    General Public License, either version 2 of the license or,
 *    at your choice, any later version. Alternatively, you may use and
 *    distribute under the terms of the XPL.
 *
 *    See the LICENSE.lgpl and LICENSE.xpl files for the specific terms of 
 *    the licenses.
 *
 *    This software is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the README
 *    file for more details.
 *
 */
/*
 * Written by Benjamin Fallenstein
 */

package org.gzigzag;

import java.awt.Point;
import org.gzigzag.errors.ZZError;

/**
 * A ZZCommand interface to ZZPrimitiveActions.
 */

public class ZZPrimitiveCommand extends ZZCommand implements ZOb {


    /**
     * UNDOCUMENTED.
     *
     * <p>Default value: <PRE> null;</PRE>.
     *
     * @structparam 1
     */

    public
    ZZCell code
            = null;


    /* AUTOGENERATED! */
    static final private int fullmask = 1;

    /* AUTOGENERATED! */
    public String readParams(ZZCell start) {
        int m = 0;
        try {
            if (start!=null)
                m = readParams(start, 0);
        } catch (Throwable t) {
            ZZLogger.exc(t);
        } finally {
            init__zob();
        }
        if ((m & fullmask)!=fullmask) {
            // not all parameters present - no problem right now.
        }
        return "";
    }

    /* AUTOGENERATED! */
    private int readParams(ZZCell start, int mask) {
        ZZCell n = start;
        while (n!=null) {
            String s = n.getText();
            // Tests autogenerated from members.

            if (s.equals("code")) {
                mask |= 1;
                try {
                    ZZCell c = n.s("d.1");
                    s = c.getText();
                    {
                        code = c;
                    }

                } catch (Exception e) {
                    ZZLogger.exc(e);
                }
            } else {
            } // grab that last "else"
            ZZCell h = n.h("d.3");
            if (h!=null && h!=n) {
                // recurse
                mask |= readParams(h, mask);
            }
            n = n.s("d.2");
        }
        return mask;
    }


    protected void init__zob() {
        if (code==null)
            throw new ZZError("Must specify ZZPrimitiveCommand code!");
    }

    ZZPrimitiveActions pa = new ZZPrimitiveActions();

    public void execCallback(
            ZZCell target,
            ZZView view,
            ZZView cview,
            String key,
            Point pt,
            ZZScene xi
    ) {
        pa.execCallback(code, target, view, cview, key, pt, xi);
    }

    public void exec(ZZCell param) {
        throw new ZZError("ZZPrimitiveCommand currently does not support "
                                  + "primitives which aren't UI callbacks.");
    }
}