/* DO NOT EDIT THIS FILE. THIS FILE WAS GENERATED FROM clang/heraclitus/HeraclitusCommand.zob,
 * EDIT THAT FILE INSTEAD!
 * All changes to this file will be lost.
 */
/*   
HeraclitusCommand.java
 *    
 *    You may use and distribute under the terms of either the GNU Lesser
 *    General Public License, either version 2 of the license or,
 *    at your choice, any later version. Alternatively, you may use and
 *    distribute under the terms of the XPL.
 *
 *    See the LICENSE.lgpl and LICENSE.xpl files for the specific terms of 
 *    the licenses.
 *
 *    This software is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the README
 *    file for more details.
 *
 */
/*
 * Written by Antti-Juhani Kaijanaho
 */

package org.gzigzag;
import java.awt.*;

/** ZZCommand interface to Heraclitus Clang. 
 */
class HeraclitusCommand extends ZZCommand implements ZOb {
    public static boolean dbg = false;
    static final void p(String s) { if(dbg) ZZLogger.log(s); }
    static final void pa(String s) { ZZLogger.log(s); }
    
    
    
        /** Heraclitus operation cell. 
 * <p>Default value: <PRE> null;</PRE>. 
 
 * @structparam 1 
 */ 

 public 
        ZZCell op
            = null;
    

    /* AUTOGENERATED! */
    static final private int fullmask = 1;

    /* AUTOGENERATED! */
    public String readParams(ZZCell start) {
	int m = 0;
	try {
	    if(start != null)
		m = readParams(start, 0);
	} catch(Throwable t) {
	    ZZLogger.exc(t);
	} finally {
	    init__zob();
	}
	if((m & fullmask) != fullmask) {
	    // not all parameters present - no problem right now.
	}
	return "";
    }

    /* AUTOGENERATED! */
    private int readParams(ZZCell start, int mask) {
	ZZCell n = start;
	while(n != null) {
	    String s = n.getText();
	    // Tests autogenerated from members.
	    
	    if(s.equals("op")) {
		mask |= 1;
		try {
		    ZZCell c = n.s("d.1"); s = c.getText(); 
    {
    op = c;
    }
 
		} catch(Exception e) {
		    ZZLogger.exc(e);
		}
	    } else


	    { } // grab that last "else"
	    ZZCell h = n.h("d.3");
	    if(h != null && h != n) {
		// recurse
		mask |= readParams(h, mask);
	    }
	    n = n.s("d.2");
	}
	return mask;
    }



    protected void init__zob()  {
	if(op == null)
	    throw new ZZError("Must specify Heraclitus Clang operation!");
    }

    public void exec(ZZCell param) {
        throw new ZZError("exec not implemented yet");
    }


    public void execCallback(
		    ZZCell target,
		    ZZView view, 
		    ZZView cview,
		    String key,
		    Point pt, 
		    ZZScene xi
		     ) {
        ZZCell curspar = op.N();
        ZZCell curs1 = op.N();
        ZZCell curs2 = curs1.N("d.1", 1);
        ZZCursorReal.set(curs1, cview.getViewcell());
        ZZCursorReal.set(curs2, view.getViewcell());
        ZZCursorReal.set(curspar, curs1);
        try {
            p("Enter heraclitus: ");
            org.gzigzag.heraclitus.HeraclitusClang.execute(op, curspar);
            p("Exit heraclitus");
        } finally {
            ZZCursorReal.delete(curs1);
            ZZCursorReal.delete(curs2);
            ZZCursorReal.delete(curspar);
            curs1.delete();
            curs2.delete();
            curspar.delete();
        }

    }
    
}

// vim: set syntax=java :
